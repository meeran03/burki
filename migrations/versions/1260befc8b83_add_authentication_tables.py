"""Add authentication tables

Revision ID: 1260befc8b83
Revises: c0797a3ee59b
Create Date: 2025-05-23 02:28:11.258462

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column


# revision identifiers, used by Alembic.
revision: str = '1260befc8b83'
down_revision: Union[str, None] = 'c0797a3ee59b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create organizations table
    op.create_table('organizations',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('slug', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('domain', sa.String(length=100), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('settings', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_organizations_slug'), 'organizations', ['slug'], unique=True)
    
    # Create users table
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('organization_id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('full_name', sa.String(length=100), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=True),
    sa.Column('google_id', sa.String(length=100), nullable=True),
    sa.Column('avatar_url', sa.String(length=500), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('role', sa.String(length=20), nullable=False),
    sa.Column('last_login_at', sa.DateTime(), nullable=True),
    sa.Column('login_count', sa.Integer(), nullable=False),
    sa.Column('preferences', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_user_org_email', 'users', ['organization_id', 'email'], unique=True)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=False)
    op.create_index(op.f('ix_users_google_id'), 'users', ['google_id'], unique=False)
    op.create_index(op.f('ix_users_organization_id'), 'users', ['organization_id'], unique=False)
    
    # Create user API keys table
    op.create_table('user_api_keys',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('key_hash', sa.String(length=255), nullable=False),
    sa.Column('key_prefix', sa.String(length=20), nullable=False),
    sa.Column('last_used_at', sa.DateTime(), nullable=True),
    sa.Column('usage_count', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('permissions', sa.JSON(), nullable=True),
    sa.Column('rate_limit', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_api_keys_key_hash'), 'user_api_keys', ['key_hash'], unique=False)
    op.create_index(op.f('ix_user_api_keys_user_id'), 'user_api_keys', ['user_id'], unique=False)
    
    # Handle existing assistants by creating default organization and user
    connection = op.get_bind()
    
    # Check if there are existing assistants
    result = connection.execute(sa.text("SELECT COUNT(*) FROM assistants")).fetchone()
    has_existing_assistants = result[0] > 0
    
    if has_existing_assistants:
        # Create default organization
        default_org_id = connection.execute(sa.text("""
            INSERT INTO organizations (name, slug, is_active, settings, created_at, updated_at)
            VALUES ('Default Organization', 'default', true, '{}', NOW(), NOW())
            RETURNING id
        """)).fetchone()[0]
        
        # Create default user
        default_user_id = connection.execute(sa.text("""
            INSERT INTO users (organization_id, email, full_name, is_active, is_verified, role, login_count, preferences, created_at, updated_at)
            VALUES (:org_id, 'admin@default.com', 'Default Admin', true, true, 'admin', 0, '{}', NOW(), NOW())
            RETURNING id
        """), {"org_id": default_org_id}).fetchone()[0]
        
        # Add columns as nullable first
        op.add_column('assistants', sa.Column('organization_id', sa.Integer(), nullable=True))
        op.add_column('assistants', sa.Column('user_id', sa.Integer(), nullable=True))
        
        # Update existing assistants with default values
        connection.execute(sa.text("""
            UPDATE assistants 
            SET organization_id = :org_id, user_id = :user_id 
            WHERE organization_id IS NULL OR user_id IS NULL
        """), {"org_id": default_org_id, "user_id": default_user_id})
        
        # Now make the columns non-nullable
        op.alter_column('assistants', 'organization_id', nullable=False)
        op.alter_column('assistants', 'user_id', nullable=False)
    else:
        # No existing assistants, can add columns as NOT NULL directly
        op.add_column('assistants', sa.Column('organization_id', sa.Integer(), nullable=False))
        op.add_column('assistants', sa.Column('user_id', sa.Integer(), nullable=False))
    
    # Create indexes and foreign keys
    op.create_index(op.f('ix_assistants_organization_id'), 'assistants', ['organization_id'], unique=False)
    op.create_index(op.f('ix_assistants_user_id'), 'assistants', ['user_id'], unique=False)
    op.create_foreign_key(None, 'assistants', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'assistants', 'organizations', ['organization_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'assistants', type_='foreignkey')
    op.drop_constraint(None, 'assistants', type_='foreignkey')
    op.drop_index(op.f('ix_assistants_user_id'), table_name='assistants')
    op.drop_index(op.f('ix_assistants_organization_id'), table_name='assistants')
    op.drop_column('assistants', 'user_id')
    op.drop_column('assistants', 'organization_id')
    op.drop_index(op.f('ix_user_api_keys_user_id'), table_name='user_api_keys')
    op.drop_index(op.f('ix_user_api_keys_key_hash'), table_name='user_api_keys')
    op.drop_table('user_api_keys')
    op.drop_index(op.f('ix_users_organization_id'), table_name='users')
    op.drop_index(op.f('ix_users_google_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index('idx_user_org_email', table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_organizations_slug'), table_name='organizations')
    op.drop_table('organizations')
    # ### end Alembic commands ###
