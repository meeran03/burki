name: Deploy FastAPI to AWS EC2 with ECR (Staging)

on:
  push:
    branches:
      - stage

jobs:
  set-metadata:
    runs-on: ubuntu-latest
    outputs:
      SHORT_SHA: ${{ steps.meta.outputs.SHORT_SHA }}
    steps:
      - name: Extract metadata for Docker
        id: meta
        run: |
          echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

  build-api:
    needs: set-metadata
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        uses: docker/login-action@v2
        with:
          registry: 715841345017.dkr.ecr.us-east-2.amazonaws.com
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build and push API Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            715841345017.dkr.ecr.us-east-2.amazonaws.com/conversation-machine-stage-api:${{ needs.set-metadata.outputs.SHORT_SHA }}
            715841345017.dkr.ecr.us-east-2.amazonaws.com/conversation-machine-stage-api:latest
          build-args: |
            ENV=stage
            ENABLE_JOBS=false
          cache-from: type=registry,ref=715841345017.dkr.ecr.us-east-2.amazonaws.com/conversation-machine-stage-api:latest
          cache-to: type=inline

  build-jobs:
    needs: set-metadata
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        uses: docker/login-action@v2
        with:
          registry: 715841345017.dkr.ecr.us-east-2.amazonaws.com
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build and push Jobs Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            715841345017.dkr.ecr.us-east-2.amazonaws.com/conversation-machine-stage-jobs:${{ needs.set-metadata.outputs.SHORT_SHA }}
            715841345017.dkr.ecr.us-east-2.amazonaws.com/conversation-machine-stage-jobs:latest
          build-args: |
            ENV=stage
            ENABLE_JOBS=true
          cache-from: type=registry,ref=715841345017.dkr.ecr.us-east-2.amazonaws.com/conversation-machine-stage-jobs:latest
          cache-to: type=inline

  deploy:
    needs: [build-api, build-jobs]
    runs-on: ubuntu-latest
    steps:
      - name: SSH into EC2 and deploy Docker containers
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_STAGE }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_REGION=us-east-2
            SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)

            aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 715841345017.dkr.ecr.us-east-2.amazonaws.com

            docker pull 715841345017.dkr.ecr.us-east-2.amazonaws.com/conversation-machine-stage-api:${SHORT_SHA}
            docker pull 715841345017.dkr.ecr.us-east-2.amazonaws.com/conversation-machine-stage-jobs:${SHORT_SHA}

            docker stop conversation-machine-stage-api || true
            docker rm conversation-machine-stage-api || true
            docker stop conversation-machine-stage-jobs || true
            docker rm conversation-machine-stage-jobs || true

            docker run -d \
              --log-driver=awslogs \
              --log-opt awslogs-region=us-east-2 \
              --log-opt awslogs-group=conversation-machine-stage-api-logs \
              --log-opt awslogs-stream=conversation-machine-stage-api \
              --log-opt awslogs-create-group=true \
              --memory=4g \
              -p 8000:8000 \
              -e ENABLE_JOBS=false \
              --name conversation-machine-stage-api \
              715841345017.dkr.ecr.us-east-2.amazonaws.com/conversation-machine-stage-api:${SHORT_SHA}

            docker run -d \
              --log-driver=awslogs \
              --log-opt awslogs-region=us-east-2 \
              --log-opt awslogs-group=conversation-machine-stage-jobs-logs \
              --log-opt awslogs-stream=conversation-machine-stage-jobs \
              --log-opt awslogs-create-group=true \
              --memory=4g \
              -p 8080:8000 \
              -e ENABLE_JOBS=true \
              --name conversation-machine-stage-jobs \
              715841345017.dkr.ecr.us-east-2.amazonaws.com/conversation-machine-stage-jobs:${SHORT_SHA}

            docker exec conversation-machine-stage-api alembic upgrade head

            echo "Cleaning up old images..."
            KEEP_IMAGES="715841345017.dkr.ecr.us-east-2.amazonaws.com/conversation-machine-stage-api:${SHORT_SHA} \
                        715841345017.dkr.ecr.us-east-2.amazonaws.com/conversation-machine-stage-api:latest \
                        715841345017.dkr.ecr.us-east-2.amazonaws.com/conversation-machine-stage-jobs:${SHORT_SHA} \
                        715841345017.dkr.ecr.us-east-2.amazonaws.com/conversation-machine-stage-jobs:latest"

            for img in $(docker images "715841345017.dkr.ecr.us-east-2.amazonaws.com/conversation-machine-stage-*" -q); do
              if ! echo "${KEEP_IMAGES}" | grep -q $(docker inspect --format='{{.RepoTags}}' $img); then
                docker rmi $img || true
              fi
            done